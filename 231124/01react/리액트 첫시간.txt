jQuery : 한계가 있음 (write less, do more) + 스타일 컴포넌트(CSS 대신=문법 비슷)

Angluar(*마소): 그래서 얘가 나왔는데 겁나 어려움

Vue: 그래서 얘가 나옴/겁나 쉬움_2~3주면 마스터/html&css문법 위주~ js 조금/그래서 변별력이 없음/그래서 기능에 구현이 있음

↓ 그래서 얘가 나옴/ 쉽고 기능많고-
React : 자바스크립트를 활용한 UI라이브러리(*마크주커버그/페북 창시자)
(Learn once, write anywhere)

*JS/TS 강력한 기능 = 모듈 = 레고 블록 조립

React는 어디에서 구현이 가능한가?
>반드시 node.js 에서만 구현 가능
>node -v/npm -v
>npm i react
>node 생태계에서도 리액트는 VIP => npx -v
>npx(설치와 동시에 실행해라) create-react-app myapp(내폴더)
>cd myapp
>npm start
>React App 실행됨

- 심도있게! 왜 React를 배우는가?
1) 컴포넌트화 시켜서 한번에 동시 다발적으로 처리!
-특정 섹션 내용만 다른 비효율적인 프로그래밍 파일이 지속적으로 생성
-만약, 공통영역의 수정사항이 발생!(*50개)
(*중복된 코드가 많을수록 디버깅 및 트러블슈팅에 할애해야하는 시간이 비효율적으로 많이 들어간다는 것을 => 
shotgun surgery)
=> *React는 Component 기반 JS UI 라이브러리

2) React는 JS 라이브러리 언어 중 대표적인 선언형 프로그래밍 방식
JS 명령형 프로그래밍 방식으로 코드를 생성! (* 어떤 프로그래밍 코드를 설계할 때, 비슷한 형식일지라도 매번 유사한 명령문을
가져다가 사용해야!)
=> jQuery는 대표적인 JS의 명령형 프로그래밍 방식 -> 그래서 사양길을 걷고있음..

선언형 프로그래밍 방식 

3) React의 혁신적인 Virtual(*가상의) DOM 사용할 수 있기 때문!
-DOM: Document Object Model(*문서객체모델)
-일반적으로 우리가 그동안 만든 웹 페이지 => 구글 파이어베이스 활용 호스팅
-URL 도메인 주소 생성!
-주소창에 URL 도메인 주소: 행위 => 구글 서버한테
-URL 도메인= html,css,js 가지고 와! 라고 입력하는것
-웹 브라우저 <= 서버(html,css,js)
-메인/상세메뉴/슬라이드 복수페이지(50개) 명령으로 왔다갔다 하기엔 서버에 무리(터질것)
가상의 돔 안에서 컴포넌트에 선언해놓고 가져다가 쓰자
-웹 브라우저에 출력되고 있는 문서! => 업데이트 발생(*이벤트)
-가상돔을 활용하는 React에서는 실제로 이벤트가 발생된 최초에만 DOM의 상태를 변화시키고, 그 이후에 동일한 이벤트가 발생되면, 계속 신규로 DOM의 업데이트하는 것이 아니라, 이미 최초에 전달한 이벤트의 결과값을 담고 있는 코드!! 재활용!

*웹 브라우저에 React 구현!
1) 직접 여러분들이 가상 DOM 생성하는 방법!-> 1%
2) 노드의 NPM를 활용하는 방법!-> 99%

GUI: 개발영역에서는 거의 사용되지않는다

