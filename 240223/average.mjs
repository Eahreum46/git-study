const a = 87;
const b = 70;
const c = 100;

const average = (a + b + c) / 3;
console.log(average);

//미션: 아래 배열에서 숫자 5찾기, 시간복잡도 계산
const arr = [1, 3, 5, 7];
const arr1 = [5, 1, 3, 7];
const arr2 = [1, 3, 7, 5];
// 10개 => 10번
// n개 => n번
// O(n)

// 빅 오메가 : 가장 빠른 경우 : 한 번에 값을 찾는 경우
// 빅 오 : 가장 늦은 경우 : 배열의 모든 아이템을 검수 => 배열의 길이만큼 시간
// 빅 세타 : 보통 경우 : 배열의 중간도 만큼 아이템을 검수

// 일반적으로 시간복잡도 계산 => 어떤 경우를 전제로 삼는가 => 빅 오의 경우!
// O(n)알고리즘을 활용해서 시간복잡도 계산!

// O(2n) < O(n²) < O(n) < O(1)

// O(5)

// 배열 요소 : 모든 프로그래밍 언너 기본적으로 제공되는 자료구조!!
// 자바스크립트 자료구조 & 알고리즘 => 시간복잡도 효율 개선!!
// 자바 VS 자바스크립트
// int arr[10] = {1, 2, 3, 4, 5} => 10개 할당되는 메모리 공간
// 자바스크립트 배열

// 이 자료구조 효율성
// 배열 : 장점 => 자료를 생성 혹은 읽어야하는 경우! 효율
// 배열 : 단점 => 메모리 공간 할당 예측불가!

// 자바스크립트 자료구조
// 1) 배열을 활용한 자료구조화
// 2) 연결리스트를 활용한 자료구조화
// DOM => 노드(Node)를 생성해서 => 연결!

// 어떤 목적 & 목표 => 배열 & 연결리스트

// 최초 생성한 데이터 고정! => 값이 변경될 일이 없는 경우 : 배열 자료구조
// 동적으로 데이터 변경!! => Node를 활용한 연결리스트 자료구조

// 연결리스트를 활용한 자료구조를 학습!
